{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nconst DynamicStyleUpdater = ({\n  getStyle,\n  triggerCondition,\n  elementSelector = 'body'\n}) => {\n  _s();\n  useEffect(() => {\n    const element = document.querySelector(elementSelector);\n    const newStyle = getStyle();\n    if (!element) return; // Exit if no element is found\n\n    // Apply the calculated style safely\n    Object.keys(newStyle).forEach(key => {\n      const styleKey = key; // Ensure key is a valid CSS property\n      const styleValue = newStyle[styleKey];\n      if (styleValue) {\n        element.style[styleKey] = styleValue.toString();\n      }\n    });\n  }, [getStyle, triggerCondition, elementSelector]);\n  return null; // No visible rendering, purely for side effects\n};\n_s(DynamicStyleUpdater, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = DynamicStyleUpdater;\nexport default DynamicStyleUpdater;\nvar _c;\n$RefreshReg$(_c, \"DynamicStyleUpdater\");","map":{"version":3,"names":["useEffect","DynamicStyleUpdater","getStyle","triggerCondition","elementSelector","_s","element","document","querySelector","newStyle","Object","keys","forEach","key","styleKey","styleValue","style","toString","_c","$RefreshReg$"],"sources":["/Users/aoifemcloughlin/react_toggle_quiz_project/src/DynamicStyleUpdater.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\n\ninterface DynamicStyleUpdaterProps {\n  /** Function that returns the CSS background value based on some condition */\n  getStyle: () => React.CSSProperties;\n  triggerCondition?: any;\n  elementSelector?: string;\n}\n\nconst DynamicStyleUpdater: React.FC<DynamicStyleUpdaterProps> = ({\n  getStyle,\n  triggerCondition,\n  elementSelector = 'body', }) => {\n\n    useEffect(() => {\n      const element = document.querySelector(elementSelector) as HTMLElement | null;\n      const newStyle = getStyle();\n\n      if (!element) return; // Exit if no element is found\n\n      // Apply the calculated style safely\n      Object.keys(newStyle).forEach((key) => {\n        const styleKey = key as keyof React.CSSProperties; // Ensure key is a valid CSS property\n        const styleValue = newStyle[styleKey];\n\n        if (styleValue) {\n          element.style[styleKey as any] = styleValue.toString();\n        }\n      });\n    }, [getStyle, triggerCondition, elementSelector]);\n\n    return null; // No visible rendering, purely for side effects\n};\n\nexport default DynamicStyleUpdater;"],"mappings":";AAAA,SAAgBA,SAAS,QAAQ,OAAO;AAUxC,MAAMC,mBAAuD,GAAGA,CAAC;EAC/DC,QAAQ;EACRC,gBAAgB;EAChBC,eAAe,GAAG;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAE9BL,SAAS,CAAC,MAAM;IACd,MAAMM,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAACJ,eAAe,CAAuB;IAC7E,MAAMK,QAAQ,GAAGP,QAAQ,CAAC,CAAC;IAE3B,IAAI,CAACI,OAAO,EAAE,OAAO,CAAC;;IAEtB;IACAI,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAACG,OAAO,CAAEC,GAAG,IAAK;MACrC,MAAMC,QAAQ,GAAGD,GAAgC,CAAC,CAAC;MACnD,MAAME,UAAU,GAAGN,QAAQ,CAACK,QAAQ,CAAC;MAErC,IAAIC,UAAU,EAAE;QACdT,OAAO,CAACU,KAAK,CAACF,QAAQ,CAAQ,GAAGC,UAAU,CAACE,QAAQ,CAAC,CAAC;MACxD;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACf,QAAQ,EAAEC,gBAAgB,EAAEC,eAAe,CAAC,CAAC;EAEjD,OAAO,IAAI,CAAC,CAAC;AACjB,CAAC;AAACC,EAAA,CAvBIJ,mBAAuD;AAAAiB,EAAA,GAAvDjB,mBAAuD;AAyB7D,eAAeA,mBAAmB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}