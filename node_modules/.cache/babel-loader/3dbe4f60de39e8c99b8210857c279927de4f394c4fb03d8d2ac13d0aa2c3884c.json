{"ast":null,"code":"import React,{useState,useEffect}from'react';import ToggleAnswer from'./ToggleAnswer';import MeanValueCalculator from'./MeanValueCalculator';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const QuestionAnswer=_ref=>{let{questionAnswer,onMeanValueChange=()=>{},onAnswerSelect,disableAnswering,userSelectedIndices}=_ref;const{question,answerList}=questionAnswer;const[selectedIndices,setSelectedIndices]=useState([]);const handleOptionSelect=(index,value)=>{const updatedValues=[...selectedIndices];updatedValues[index]=value;setSelectedIndices(updatedValues);};useEffect(()=>{if(userSelectedIndices.length>0&&selectedIndices.length===0){setSelectedIndices(userSelectedIndices);}else if(selectedIndices.length===0){const defaultValues=Array(answerList.length).fill(0);setSelectedIndices(defaultValues);}},[userSelectedIndices,answerList,question]);const selectedValues=userSelectedIndices.map((selectedIndex,listIndex)=>{var _currentAnswerList$se;const currentAnswerList=answerList[listIndex];return((_currentAnswerList$se=currentAnswerList[selectedIndex])===null||_currentAnswerList$se===void 0?void 0:_currentAnswerList$se.value)||0;});useEffect(()=>{if(JSON.stringify(selectedIndices)!==JSON.stringify(userSelectedIndices)){onAnswerSelect(selectedIndices);}},[selectedIndices,onAnswerSelect,userSelectedIndices]);return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col items-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-3xl font-bold mb-6 text-white\",children:question}),answerList.map((options,index)=>/*#__PURE__*/_jsx(ToggleAnswer,{// Provide a unique key for each answer set\noptions:options// Pass the current set of options to ToggleAnswer\n,onMeanValueChange:value=>handleOptionSelect(index,value)// Handle option selection\n,disable:disableAnswering,selectedIndex:selectedIndices[index]},'Answer'+String(index))),/*#__PURE__*/_jsx(MeanValueCalculator,{optionValues:selectedValues,onMeanValueChange:onMeanValueChange})]});};export default QuestionAnswer;","map":{"version":3,"names":["React","useState","useEffect","ToggleAnswer","MeanValueCalculator","jsx","_jsx","jsxs","_jsxs","QuestionAnswer","_ref","questionAnswer","onMeanValueChange","onAnswerSelect","disableAnswering","userSelectedIndices","question","answerList","selectedIndices","setSelectedIndices","handleOptionSelect","index","value","updatedValues","length","defaultValues","Array","fill","selectedValues","map","selectedIndex","listIndex","_currentAnswerList$se","currentAnswerList","JSON","stringify","className","children","options","disable","String","optionValues"],"sources":["/Users/aoifemcloughlin/react_toggle_quiz_project/src/QuestionAnswer.tsx"],"sourcesContent":["import React, { useState, useEffect }from 'react';\nimport ToggleAnswer from './ToggleAnswer';\nimport MeanValueCalculator from './MeanValueCalculator';\n\ninterface Answer {\n  label: string;\n  value: number;\n}\n\ninterface QuestionAnswerSet {\n  question: string;\n  answerList: Answer[][];\n}\n\ninterface QuestionAnswerProps {\n  questionAnswer: QuestionAnswerSet;\n  onMeanValueChange?: (meanValue: number) => void;\n  onAnswerSelect: (value: number[]) => void; // Callback to handle answer selection\n  disableAnswering: boolean;\n  userSelectedIndices: number[];\n}\n\nconst QuestionAnswer: React.FC<QuestionAnswerProps> = ({\n    questionAnswer,\n    onMeanValueChange = () => {},\n    onAnswerSelect,\n    disableAnswering,\n    userSelectedIndices}) => {\n  const {question, answerList} = questionAnswer;\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([]);\n\n  const handleOptionSelect = (index: number, value: number) => {\n    const updatedValues = [...selectedIndices];\n    updatedValues[index] = value;\n    setSelectedIndices(updatedValues);\n  };\n\n  useEffect(() => {\n    if (userSelectedIndices.length > 0 && selectedIndices.length === 0) {\n      setSelectedIndices(userSelectedIndices);\n    } else if (selectedIndices.length === 0) {\n      const defaultValues = (Array(answerList.length).fill(0))\n      setSelectedIndices(defaultValues);\n    }\n  }, [userSelectedIndices, answerList, question]);\n\n  const selectedValues = userSelectedIndices.map((selectedIndex, listIndex) => {\n    const currentAnswerList = answerList[listIndex];\n    return currentAnswerList[selectedIndex]?.value || 0;\n  });\n\n  useEffect(() => {\n    if (JSON.stringify(selectedIndices) !== JSON.stringify(userSelectedIndices)) {\n      onAnswerSelect(selectedIndices);\n    }\n  }, [selectedIndices, onAnswerSelect, userSelectedIndices]);\n\n\n  return (\n    <div className='flex flex-col items-center'>\n      {/* Display the question text */}\n       <div className=\"text-3xl font-bold mb-6 text-white\">{question}</div>\n\n      {/* Map through the answerList and render ToggleAnswer for each set */}\n      {answerList.map((options, index) => (\n        <ToggleAnswer\n          key={'Answer' + String(index)} // Provide a unique key for each answer set\n          options={options} // Pass the current set of options to ToggleAnswer\n          onMeanValueChange={(value) => handleOptionSelect(index, value)} // Handle option selection\n          disable={disableAnswering}\n          selectedIndex={selectedIndices[index]}\n        />\n      ))}\n\n      {/* MeanValueCalculator for calculating the mean of selected values */}\n      <MeanValueCalculator optionValues={selectedValues} onMeanValueChange={onMeanValueChange} />\n\n    </div>\n  );\n};\n\nexport default QuestionAnswer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}