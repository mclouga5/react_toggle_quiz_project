{"ast":null,"code":"var _jsxFileName = \"/Users/aoifemcloughlin/react_toggle_quiz_project/src/QuestionAnswer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ToggleAnswer from './ToggleAnswer';\nimport MeanValueCalculator from './MeanValueCalculator';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuestionAnswer = ({\n  questionAnswer,\n  onMeanValueChange = () => {},\n  onAnswerSelect,\n  disableAnswering,\n  userSelectedIndices\n}) => {\n  _s();\n  const {\n    question,\n    answerList\n  } = questionAnswer;\n  const [selectedIndices, setSelectedIndices] = useState([]);\n  const handleOptionSelect = (index, value) => {\n    const updatedValues = [...selectedIndices];\n    updatedValues[index] = value;\n    setSelectedIndices(updatedValues);\n  };\n  useEffect(() => {\n    if (userSelectedIndices.length > 0 && selectedIndices.length === 0) {\n      setSelectedIndices(userSelectedIndices);\n    } else if (selectedIndices.length === 0) {\n      const defaultValues = Array(answerList.length).fill(0);\n      setSelectedIndices(defaultValues);\n    }\n  }, [userSelectedIndices, answerList, question]);\n  const selectedValues = userSelectedIndices.map((selectedIndex, listIndex) => {\n    var _currentAnswerList$se;\n    const currentAnswerList = answerList[listIndex];\n    return ((_currentAnswerList$se = currentAnswerList[selectedIndex]) === null || _currentAnswerList$se === void 0 ? void 0 : _currentAnswerList$se.value) || 0;\n  });\n  useEffect(() => {\n    if (JSON.stringify(selectedIndices) !== JSON.stringify(userSelectedIndices)) {\n      onAnswerSelect(selectedIndices);\n    }\n  }, [selectedIndices, onAnswerSelect, userSelectedIndices]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-3xl font-bold mb-text-white\",\n      children: question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 8\n    }, this), answerList.map((options, index) => /*#__PURE__*/_jsxDEV(ToggleAnswer, {\n      // Provide a unique key for each answer set\n      options: options // Pass the current set of options to ToggleAnswer\n      ,\n      onMeanValueChange: value => handleOptionSelect(index, value) // Handle option selection\n      ,\n      disable: disableAnswering,\n      selectedIndex: selectedIndices[index]\n    }, 'Answer' + String(index), false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(MeanValueCalculator, {\n      optionValues: selectedValues,\n      onMeanValueChange: onMeanValueChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(QuestionAnswer, \"0TAuo7tuPXlIc0SJxCFzeyks0uc=\");\n_c = QuestionAnswer;\nexport default QuestionAnswer;\nvar _c;\n$RefreshReg$(_c, \"QuestionAnswer\");","map":{"version":3,"names":["React","useState","useEffect","ToggleAnswer","MeanValueCalculator","jsxDEV","_jsxDEV","QuestionAnswer","questionAnswer","onMeanValueChange","onAnswerSelect","disableAnswering","userSelectedIndices","_s","question","answerList","selectedIndices","setSelectedIndices","handleOptionSelect","index","value","updatedValues","length","defaultValues","Array","fill","selectedValues","map","selectedIndex","listIndex","_currentAnswerList$se","currentAnswerList","JSON","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","options","disable","String","optionValues","_c","$RefreshReg$"],"sources":["/Users/aoifemcloughlin/react_toggle_quiz_project/src/QuestionAnswer.tsx"],"sourcesContent":["import React, { useState, useEffect }from 'react';\nimport ToggleAnswer from './ToggleAnswer';\nimport MeanValueCalculator from './MeanValueCalculator';\n\ninterface Answer {\n  label: string;\n  value: number;\n}\n\ninterface QuestionAnswerSet {\n  question: string;\n  answerList: Answer[][];\n}\n\ninterface QuestionAnswerProps {\n  questionAnswer: QuestionAnswerSet;\n  onMeanValueChange?: (meanValue: number) => void;\n  onAnswerSelect: (value: number[]) => void; // Callback to handle answer selection\n  disableAnswering: boolean;\n  userSelectedIndices: number[];\n}\n\nconst QuestionAnswer: React.FC<QuestionAnswerProps> = ({\n    questionAnswer,\n    onMeanValueChange = () => {},\n    onAnswerSelect,\n    disableAnswering,\n    userSelectedIndices}) => {\n  const {question, answerList} = questionAnswer;\n  const [selectedIndices, setSelectedIndices] = useState<number[]>([]);\n\n  const handleOptionSelect = (index: number, value: number) => {\n    const updatedValues = [...selectedIndices];\n    updatedValues[index] = value;\n    setSelectedIndices(updatedValues);\n  };\n\n  useEffect(() => {\n    if (userSelectedIndices.length > 0 && selectedIndices.length === 0) {\n      setSelectedIndices(userSelectedIndices);\n    } else if (selectedIndices.length === 0) {\n      const defaultValues = (Array(answerList.length).fill(0))\n      setSelectedIndices(defaultValues);\n    }\n  }, [userSelectedIndices, answerList, question]);\n\n  const selectedValues = userSelectedIndices.map((selectedIndex, listIndex) => {\n    const currentAnswerList = answerList[listIndex];\n    return currentAnswerList[selectedIndex]?.value || 0;\n  });\n\n  useEffect(() => {\n    if (JSON.stringify(selectedIndices) !== JSON.stringify(userSelectedIndices)) {\n      onAnswerSelect(selectedIndices);\n    }\n  }, [selectedIndices, onAnswerSelect, userSelectedIndices]);\n\n\n  return (\n    <div className=''>\n      {/* Display the question text */}\n       <div className=\"text-3xl font-bold mb-text-white\">{question}</div>\n\n      {/* Map through the answerList and render ToggleAnswer for each set */}\n      {answerList.map((options, index) => (\n        <ToggleAnswer\n          key={'Answer' + String(index)} // Provide a unique key for each answer set\n          options={options} // Pass the current set of options to ToggleAnswer\n          onMeanValueChange={(value) => handleOptionSelect(index, value)} // Handle option selection\n          disable={disableAnswering}\n          selectedIndex={selectedIndices[index]}\n        />\n      ))}\n\n      {/* MeanValueCalculator for calculating the mean of selected values */}\n      <MeanValueCalculator optionValues={selectedValues} onMeanValueChange={onMeanValueChange} />\n\n    </div>\n  );\n};\n\nexport default QuestionAnswer;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACjD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,mBAAmB,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAoBxD,MAAMC,cAA6C,GAAGA,CAAC;EACnDC,cAAc;EACdC,iBAAiB,GAAGA,CAAA,KAAM,CAAC,CAAC;EAC5BC,cAAc;EACdC,gBAAgB;EAChBC;AAAmB,CAAC,KAAK;EAAAC,EAAA;EAC3B,MAAM;IAACC,QAAQ;IAAEC;EAAU,CAAC,GAAGP,cAAc;EAC7C,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAW,EAAE,CAAC;EAEpE,MAAMiB,kBAAkB,GAAGA,CAACC,KAAa,EAAEC,KAAa,KAAK;IAC3D,MAAMC,aAAa,GAAG,CAAC,GAAGL,eAAe,CAAC;IAC1CK,aAAa,CAACF,KAAK,CAAC,GAAGC,KAAK;IAC5BH,kBAAkB,CAACI,aAAa,CAAC;EACnC,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACd,IAAIU,mBAAmB,CAACU,MAAM,GAAG,CAAC,IAAIN,eAAe,CAACM,MAAM,KAAK,CAAC,EAAE;MAClEL,kBAAkB,CAACL,mBAAmB,CAAC;IACzC,CAAC,MAAM,IAAII,eAAe,CAACM,MAAM,KAAK,CAAC,EAAE;MACvC,MAAMC,aAAa,GAAIC,KAAK,CAACT,UAAU,CAACO,MAAM,CAAC,CAACG,IAAI,CAAC,CAAC,CAAE;MACxDR,kBAAkB,CAACM,aAAa,CAAC;IACnC;EACF,CAAC,EAAE,CAACX,mBAAmB,EAAEG,UAAU,EAAED,QAAQ,CAAC,CAAC;EAE/C,MAAMY,cAAc,GAAGd,mBAAmB,CAACe,GAAG,CAAC,CAACC,aAAa,EAAEC,SAAS,KAAK;IAAA,IAAAC,qBAAA;IAC3E,MAAMC,iBAAiB,GAAGhB,UAAU,CAACc,SAAS,CAAC;IAC/C,OAAO,EAAAC,qBAAA,GAAAC,iBAAiB,CAACH,aAAa,CAAC,cAAAE,qBAAA,uBAAhCA,qBAAA,CAAkCV,KAAK,KAAI,CAAC;EACrD,CAAC,CAAC;EAEFlB,SAAS,CAAC,MAAM;IACd,IAAI8B,IAAI,CAACC,SAAS,CAACjB,eAAe,CAAC,KAAKgB,IAAI,CAACC,SAAS,CAACrB,mBAAmB,CAAC,EAAE;MAC3EF,cAAc,CAACM,eAAe,CAAC;IACjC;EACF,CAAC,EAAE,CAACA,eAAe,EAAEN,cAAc,EAAEE,mBAAmB,CAAC,CAAC;EAG1D,oBACEN,OAAA;IAAK4B,SAAS,EAAC,EAAE;IAAAC,QAAA,gBAEd7B,OAAA;MAAK4B,SAAS,EAAC,kCAAkC;MAAAC,QAAA,EAAErB;IAAQ;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EAGlExB,UAAU,CAACY,GAAG,CAAC,CAACa,OAAO,EAAErB,KAAK,kBAC7Bb,OAAA,CAACH,YAAY;MACoB;MAC/BqC,OAAO,EAAEA,OAAQ,CAAC;MAAA;MAClB/B,iBAAiB,EAAGW,KAAK,IAAKF,kBAAkB,CAACC,KAAK,EAAEC,KAAK,CAAE,CAAC;MAAA;MAChEqB,OAAO,EAAE9B,gBAAiB;MAC1BiB,aAAa,EAAEZ,eAAe,CAACG,KAAK;IAAE,GAJjC,QAAQ,GAAGuB,MAAM,CAACvB,KAAK,CAAC;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAK9B,CACF,CAAC,eAGFjC,OAAA,CAACF,mBAAmB;MAACuC,YAAY,EAAEjB,cAAe;MAACjB,iBAAiB,EAAEA;IAAkB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAExF,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAzDIN,cAA6C;AAAAqC,EAAA,GAA7CrC,cAA6C;AA2DnD,eAAeA,cAAc;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}